const { expect } = require('chai')
const { generateTx, decorateTx } = require('../../tools/nicks')

/* Sample bytecode for testing transaction generation.
 *
 * This bytecode was generated by compiling contracts/proxy/ForwardProxy. It's
 * taken from the value "bytecode" in the output JSON (ie, it includes the
 * constructor, and can be run as a contract deployment).
 */
const bytecode =
  '0x608060405234801561001057600080fd5b5060405161023338038061023383398101604081905261002f9161013c565b604080516001600160a01b038316602480830182905283518084039091018152604490920183526020820180516001600160e01b031663189acdbd60e31b17905291516000929161007f9161016c565b600060405180830381855af49150503d80600081146100ba576040519150601f19603f3d011682016040523d82523d6000602084013e6100bf565b606091505b50509050806101145760405162461bcd60e51b815260206004820152601660248201527f696e697469616c697a652063616c6c206661696c656400000000000000000000604482015260640160405180910390fd5b507ff86c915dad5894faca0dfa067c58fdf4307406d255ed0a65db394f82b77f53d4556101a7565b60006020828403121561014e57600080fd5b81516001600160a01b038116811461016557600080fd5b9392505050565b6000825160005b8181101561018d5760208186018101518583015201610173565b8181111561019c576000828501525b509190910192915050565b607e806101b56000396000f3fe608060405236600080376000803660007ff86c915dad5894faca0dfa067c58fdf4307406d255ed0a65db394f82b77f53d4545af43d806000803e8115604357806000f35b806000fdfea26469706673582212204a67b58b869005cb3690574efceeab184ddb4fdf25798f2dff81a86638f02afb64736f6c63430008090033'

const params = ethers.utils.defaultAbiCoder.encode(
  ['address'],
  [`0x${Buffer.from(ethers.utils.randomBytes(20)).toString('hex')}`]
)

describe('Nicks Method', () => {
  describe('generateTx', () => {
    it('generates a usable transaction', async () => {
      const tx = generateTx(
        bytecode,
        `0x${Buffer.from(ethers.utils.randomBytes(16)).toString('hex')}`,
        800000,
        100000000000,
        params
      )

      const txData = ethers.utils.parseTransaction(tx)

      expect(txData.nonce).to.equal(0)
    })
  })

  describe('decorateTx', () => {
    let decorated

    beforeEach(async () => {
      const tx = generateTx(
        bytecode,
        `0x${Buffer.from(ethers.utils.randomBytes(16)).toString('hex')}`,
        800000,
        100000000000,
        params
      )

      decorated = decorateTx(tx)

      // fund the sending account for gas
      const [account] = await ethers.getSigners()
      await account.sendTransaction({
        to: decorated.from,
        value: '800000000000000000',
      })
    })

    it('decorated tx can be sent', async () => {
      await ethers.provider.sendTransaction(decorated.raw)
    })

    it('attaches correct information', async () => {
      const reciept = await (
        await ethers.provider.sendTransaction(decorated.raw)
      ).wait()

      expect(reciept.from).to.equal(decorated.from)
      expect(reciept.contractAddress).to.equal(decorated.to)
    })
  })
})
